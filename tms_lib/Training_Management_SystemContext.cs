// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace tms_lib
{
    public partial class Training_Management_SystemContext : DbContext
    {
        public Training_Management_SystemContext()
        {
        }

        public Training_Management_SystemContext(DbContextOptions<Training_Management_SystemContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<Hr> Hrs { get; set; }
        public virtual DbSet<Manager> Managers { get; set; }
        public virtual DbSet<Training> Training { get; set; }
        public virtual DbSet<TrainingEnrolled> TrainingEnrolleds { get; set; }
        public virtual DbSet<TrainingRequest> TrainingRequests { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=LAPTOP-V357IG6O\\SQLEXPRESS01;Initial Catalog=training_management_system;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("employee");

                entity.HasIndex(e => e.EmailId, "UQ__employee__3FEF8767C91672FD")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("date_of_birth");

                entity.Property(e => e.EmailId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email_id");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.ManagerId).HasColumnName("manager_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("_name");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("_password");

                entity.Property(e => e.PhoneNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone_no");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("FK__employee__manage__3E52440B");
            });

            modelBuilder.Entity<Feedback>(entity =>
            {
                entity.ToTable("feedback");

                entity.Property(e => e.Feedbackid).HasColumnName("feedbackid");

                entity.Property(e => e.Mailid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("mailid");

                entity.Property(e => e.Msg)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("msg");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Hr>(entity =>
            {
                entity.ToTable("hr");

                entity.HasIndex(e => e.EmailId, "UQ__hr__3FEF876730077925")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("date_of_birth");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email_id");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("_name");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("_password");

                entity.Property(e => e.PhoneNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone_no");
            });

            modelBuilder.Entity<Manager>(entity =>
            {
                entity.ToTable("manager");

                entity.HasIndex(e => e.EmailId, "UQ__manager__3FEF8767F4366106")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("date_of_birth");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email_id");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.HrId).HasColumnName("hr_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("_name");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("_password");

                entity.Property(e => e.PhoneNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone_no");

                entity.HasOne(d => d.Hr)
                    .WithMany(p => p.Managers)
                    .HasForeignKey(d => d.HrId)
                    .HasConstraintName("FK__manager__hr_id__3A81B327");
            });

            modelBuilder.Entity<Training>(entity =>
            {
                entity.ToTable("training");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CourseDescription)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("course_description")
                    .IsFixedLength();

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<TrainingEnrolled>(entity =>
            {
                entity.ToTable("training_enrolled");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EmployeeId).HasColumnName("employee_id");

                entity.Property(e => e.Feedback)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("feedback");

                entity.Property(e => e.TrainingId).HasColumnName("training_id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.TrainingEnrolleds)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK__training___emplo__07C12930");

                entity.HasOne(d => d.Training)
                    .WithMany(p => p.TrainingEnrolleds)
                    .HasForeignKey(d => d.TrainingId)
                    .HasConstraintName("FK__training___train__06CD04F7");
            });

            modelBuilder.Entity<TrainingRequest>(entity =>
            {
                entity.ToTable("training_requests");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApprovalStatus).HasColumnName("approval_status");

                entity.Property(e => e.EmployeeEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("employee_email");

                entity.Property(e => e.RejectionReason)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("rejection_reason");

                entity.Property(e => e.TrainingId).HasColumnName("training_id");

                entity.HasOne(d => d.EmployeeEmailNavigation)
                    .WithMany(p => p.TrainingRequests)
                    .HasPrincipalKey(p => p.EmailId)
                    .HasForeignKey(d => d.EmployeeEmail)
                    .HasConstraintName("FK__training___emplo__2A164134");

                entity.HasOne(d => d.Training)
                    .WithMany(p => p.TrainingRequests)
                    .HasForeignKey(d => d.TrainingId)
                    .HasConstraintName("FK__training___train__29221CFB");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}